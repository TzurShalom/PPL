(define take
  (lambda (lst pos)
    (if (or (empty? lst) (= pos 0))
        (list)
        (cons (car lst) (take (cdr lst) (- pos 1))))))

(define map
  (lambda (f lst)
    (if (eq? lst (list))
        (list)
        (cons (f (car lst))
                   (map f (cdr lst))))))

(define take-map
  (lambda (lst func pos)
    (map func (take lst pos))))

(define filter
  (lambda (pred lst)
    (if (eq? lst (list))
        (list)
        (if (pred (car lst))
            (cons (car lst) (filter pred (cdr lst)))
            (filter pred (cdr lst))))))

(define take-filter
  (lambda (lst pred pos)
    (take (filter pred lst) pos)))

(define sub-size
    (lambda (lst size)
    (if (< (length lst) size)
        (list)
        (if (empty? lst)
            (list (list))
            (cons (take lst size) (sub-size (cdr lst) size))))))

(define sub-size-map
  (lambda (lst func size)
    (sub-size (map func lst) size)))

(define root
  (lambda (tree)
    (car tree)))

(define left
  (lambda (tree)
    (car (cdr tree))))

(define right
  (lambda (tree)
    (car (cdr (cdr tree)))))

(define count-node
  (lambda (tree val)
    (if (pair? tree)
        (if (eq? (root tree) val)
            (+ 1 (+ (count-node (left tree) val) (count-node (right tree) val)))
            (+ (count-node (left tree) val) (count-node (right tree) val)))
        (if (eq? tree val) 1 0))))

(define mirror-tree
  (lambda (tree)
    (if (pair? tree)
        (list (root tree) (mirror-tree (right tree)) (mirror-tree (left tree))) tree)))

(define make-ok
  (lambda (val)
    (cons 'ok val)))
 
(define make-error
  (lambda (msg)
    (cons 'error msg)))

(define ok?
  (lambda (res)
    (if (pair? res)
        (if (eq? (car res) 'ok) #t #f) #f)))

(define error?
  (lambda (res)
    (if (pair? res)
        (if (eq? (car res) 'error) #t #f) #f)))

(define result?
  (lambda (res)
    (if (or (ok? res) (error? res)) #t #f)))

(define result->val
  (lambda (res)
    (if (result? res)
        (cdr res)
        (make-error "Error: not a result"))))

(define bind 
  (lambda (f)
    (lambda (result)
      (if (ok? result)
          (f (result->val result))
          result))))